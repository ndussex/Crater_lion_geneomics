// set up a simple neutral nonWF simulation
///////////////////////////////////////////////////////////////////

// those constants are not read when running it on the command line, I have to give them as input (-d argument) in 			// my command. Or, as done now, added in the relevant block (e.g. L
given in the reproduction block)
// ancestral population may not have be that large if isolated in Eurasia after the LGM before the colonistion of the archipelago

initialize() {
	if (exists("slimgui")) {
		//400Ky burning then:
		defineConstant("KGSE_3", 50000);// GSE 10-5Ky BP // orignially 40000, then tried 20K
		defineConstant("KGSE_4", 5000);// GSE 5Ky - 600 BP  //originally 20000
		defineConstant("KGSE_6", 2000);// GSE 600-0 BP

		defineConstant("KC_0", 100);// Crater founding/split event ~200 years BP
		defineConstant("KC_1", 80);// Crater 1950-1961
		defineConstant("KC_2", 15);// Crater 1962-1964
		defineConstant("KC_2a", 30);// Crater 1965-1967
		defineConstant("KC_3", 50);// Crater 1968-1978
		defineConstant("KC_4", 100);// Crater 1979-1980
		defineConstant("KC_5", 120);// Crater 1981-1999
		defineConstant("KC_6", 50);// Crater 2000-2020

		defineConstant("KC_7", 100);// GCrater 2021-2120 //referred to as KF (K future)
		defineConstant("M", 0);	// N migrants per cycle


	}
	////////////////////////////////////////////////////
	//	1. Initialise genomic elements //////////////////
	////////////////////////////////////////////////////

	initializeSLiMModelType("nonWF");
	initializeSex("A");
	defineConstant("geneLength", 1750);
	initializeMutationRate(5e-9); // 1e-9 de Manuel et al. (2020). PNAS - 1e-8 to generate more variation and scale with lower N
					// 4e-9	could work too as current empirical estimate for Het is 0.0006
					// and simualtion Het is 0.00015 for 1e-9 as mut rate
	//draw deleterious mutations from Kim 2017 human DFE
	//and allow for different dominance coefficients for mutations with different s
	//by creating different mutation types (faster than fitness callbacks)

	defineConstant("h_VstrDel", 0.0);
	defineConstant("h_strDel", 0.01);
	defineConstant("h_modDel", 0.1);
	defineConstant("h_wkDel", 0.4);

	defineConstant("sampleSize", 10);
	defineConstant("Out", "Lion_new_repro_5e09_murate_KGSE_5KSplit200yBP_long_sampling2yearsNEW" + "_M=" + M + "_KF="+ KC_7 + "_"+ getSeed() );

	//very strongly deleterious mutations (s<-0.1)
	initializeMutationType("m1", h_VstrDel, "s", "do x=rgamma(1,-0.01314833,0.186); while (x >= -0.1); return x;");
	m1.convertToSubstitution = F;
	//strongly deleterious mutations (s<-0.01)
	initializeMutationType("m2", h_strDel, "s", "do x=rgamma(1,-0.01314833,0.186); while (x < -0.1 | x >= -0.01); return x;");
	m2.convertToSubstitution = F;
	//moderately deleterious mutations (-0.001 > s >= -0.01)
	initializeMutationType("m3", h_modDel, "s", "do x=rgamma(1,-0.01314833,0.186); while (x < -0.01 | x >= -0.001); return x;");
	m3.convertToSubstitution = F;
	//weakly deleterious mutations (s >= -0.001)
	initializeMutationType("m4", h_wkDel, "s", "do x=rgamma(1,-0.01314833,0.186); while (x < -0.001); return x;");
	m4.convertToSubstitution = F;
	//lethal mutations
	initializeMutationType("m5", 0.0,"f",-1.0);
	m5.convertToSubstitution = F;
	//neutral mutations
	initializeMutationType("m6", 0.5,"f",0.0);
	m6.convertToSubstitution = T;

	//from vaquita (Robinson et al. 2023)
	//number of genes on each autosome
	initializeGenomicElementType("g1", c(m1,m2,m3,m4,m5,m6), c(2.6, 23.6, 24.7, 49.1, 0.5,43.3));

	//10 chrom - 500 genes
	gene_vec=c(500,500,500,500,500,500,500,500,500,500) ;

	defineConstant("seqLength", sum(gene_vec)*geneLength);

	gene_num=sum(gene_vec);

	for (i in 1:gene_num){
		initializeGenomicElement(g1, ((i-1)*geneLength)+(i-1), (i*geneLength)+(i-2) );
	}

	rates=NULL;

	//assume no recombination within genes, a rate of 1e-3 between genes, and free recombination between chroms
	for (i in 1:(size(gene_vec)-1)){
		rates=c(rates, 0, rep(c(1e-3, 0), asInteger(gene_vec[i-1]-1)), 0.5);
	}
	rates=c(rates, 0, rep(c(1e-3, 0), asInteger(gene_vec[size(gene_vec)-1]-1)));

	ends=NULL;
	for (i in 1:gene_num){
		ends=c(ends, (i*geneLength)+(i-2), (i*geneLength)+(i-1));
	}
	ends=ends[0:(size(ends)-2)];

	initializeRecombinationRate(rates, ends);

}

/////////////////////////////////
//2. Demographic model //////////
/////////////////////////////////


//2.1 Create a large ancestral GSE population
////////////////////////////////////////////////////////////////
1 early() {
	sim.addSubpop("p1", 1000).setValue("K", KGSE_3);
	// info of contemporary age distribution?
	p1.individuals.age = rdunif(1000, min=0, max=14);
}

//specify longevity for males and females

//2.1.1 Reproduction for GSE
///////////////////////////////////////////////////////////////////
//https://groups.google.com/g/slim-discuss/c/O4ZzE63o2tg/m/cWUgrN0xAAAJ
//Create a set of males that only reproduce once and one of males that reproduce twice
reproduction(p1) {
	if (sim.cycle % 2 == 0){ //reproduction every 2 years - seems to reduce poppulation size by a lot
	// get males and females and randomize their order
	matureMales = subpop.sampleIndividuals(asInteger(sum(subpop.individuals.sex == "M")*0.69), sex="M", minAge=4,maxAge=10);
	matureMales_mating_twice=sample(matureMales,asInteger(length(matureMales)*0.6));
	males=c(matureMales,matureMales_mating_twice);
	//males = sample(males, size(males), replace=F);
	//cat(sim.cycle + "," + "males=" + size(males)+ "\n");

	females = subpop.subsetIndividuals(sex="F", minAge=3,maxAge=14);
	females = sample(females, size(females), replace=F);
	//cat(sim.cycle + "," + "females=" + size(males)+ "\n");

	femaleCount = size(females);
	// draw number of offspring for males, assuming dominance
	offspringCounts = sample(1:3, size(males), replace=T, weights=c(0.2,0.2,0.6));
	// go through the males until we run out of females
	nextFemaleIndex = 0;
	males.tag = 0;
	for (maleIndex in seqAlong(males))
	{
		male = males[maleIndex];
		offspringCount = offspringCounts[maleIndex];

		//catn("male offspring number: " + paste(males.tag));
		for (i in seqLen(offspringCount))
		{
			if (nextFemaleIndex < femaleCount)
			{
				offspring = subpop.addCrossed(females[nextFemaleIndex], male,sex = 0.5);
				nextFemaleIndex = nextFemaleIndex + 1;
				male.tag = male.tag + 1;
			}
			else
			{
				// disable this callback for this cycle
				self.active = 0;
				return;
			}
		}
	}
}
	// disable this callback for this cycle
	self.active = 0;
}

// 2.1.2 Age-related mortality and density-dependent selection for GSE
//////////////////////////////////////////////////////////////////////
//longevity: 14 years

early() {
	for (s in sim.subpopulations)
	{
		//0.01 for females, no info on males; 0.05 to be conservative
		L_F= c(0.5,0.2,0.05,0.05,0.15,0.15,0.15,0.15,0.15,0.15,0.4,0.4,0.4,0.4,1);
		L_M= c(0.5,0.4,0.2,0.2,0.3,0.3,0.3,0.3,0.3,0.3,0.4,0.4,0.4,0.4,1);

		inds = s.individuals;
		ages = inds.age;
//		mortality = L_F[ages];
//		survival = 1 - mortality;
//		inds.fitnessScaling = survival;

		m=(inds.sex=="M");
		f=(inds.sex=="F");

		ages_m = ages[m];
		ages_f = ages[f];

		mortality_m = L_M[ages_m];
		mortality_f = L_F[ages_f];

		//calculate survival based on age
		survival_m = 1 - mortality_m;
		survival_f = 1 - mortality_f;

		//rescale fitness based on age-survival
		inds[m].fitnessScaling = survival_m;
		inds[f].fitnessScaling = survival_f;


		K = s.getValue("K");
		//inds = s.individuals;
		inds_m = s.individuals[m];
		inds_f = s.individuals[f];
		//s.fitnessScaling = K / sum(inds.fitnessScaling); // seems to stay closer to the K I want
		//s.fitnessScaling = K /s.individualCount; //works

		//from vaquita paper, to avoid fitness of all individuals increasing to 1
		//in case of severe decline and to include viability selection and
		//impacts of inbreeding depression(Robinson et al. 2022)

		//s.fitnessScaling = min(K /(s.individualCount * mean(c(survival_m, survival_f))), 1.0);
		//sometimes fails as 's.individualCount' =0
		s.fitnessScaling = K /(s.individualCount * mean(c(survival_m, survival_f))); //works

		//s.individuals.fitnessScaling = min(K /s.individualCount * mean(c(survival_m,survival_f)), 1.0); //does not work
		s.individuals.tagF = inds.fitnessScaling*s.fitnessScaling;
	}
}


// 2.2 GSE population fluctuations (PSMC - GONE)
///////////////////////////////////////////////////

// 300K years of burnin
///////////////////////////////////////////////////////////////////
// need to specify the sex such as: p1.sampleIndividuals(4, sex="F", minAge=2)


// 2.2.1 GSE population fluctuations
////////////////////////////////////

// need burning for ~400000 years
//50Ky BP
//5000 late() {
//	p1.setValue("K", KGSE_2); //
//}

//10Ky BP
//90000 late() {
//	p1.setValue("K", KGSE_3); //
//}

//5Ky BP
305000 late() {
	p1.setValue("K", KGSE_4); //
	print("cycle number:" + sim.cycle);
}
//4Ky BP
//96000 late() {
//	p1.setValue("K", KGSE_5); //
//}
//600y BP = year 1420
309400 late() {
	p1.setValue("K", KGSE_6); //
	print("cycle number:" + sim.cycle);
}

//can I save this here and run replicates from this stage?

// 2.2.1 Create the Crater population
/////////////////////////////////////
309800  late() { //200 years BP - c. 1820 - based on SMC++ mean (178y BP)
        sim.addSubpop("p2", 0).setValue("K", 100);
	//sim.addSubpop("p2", 0).setValue("K", KC_0);// no idea why it doesn't work if I create a constant (see at the top))
       	migrants_F=p1.sampleIndividuals(50, sex="F", minAge=2,maxAge=10);
       	migrants_M=p1.sampleIndividuals(50, sex="M", minAge=2,maxAge=10);
        mig=c(migrants_M,migrants_F);
        p2.takeMigrants(mig);
        print("cycle number:" + sim.cycle + " " + "Crater pop. created");
}

309930  late() { //1950
	p2.setValue("K", KC_1); //
}

//year 1962
309942 late() {
	p2.setValue("K", KC_2); //  should be 9 females and 1 male
	//females=p2.sampleIndividuals(9, sex="F", minAge=2,maxAge=10);
	//males=p2.sampleIndividuals(2, sex="M", minAge=2,maxAge=10);
}

//year 1964
//migration of 4 males
309944 late() {
       	migrants_M=p1.sampleIndividuals(4, sex="M", minAge=4,maxAge=10);
        p2.takeMigrants(c(migrants_M));
}

//year 1965
//migration of 3 males
309945 late() {
	p2.setValue("K", KC_2a); //
	migrants_M=p1.sampleIndividuals(3, sex="M", minAge=4,maxAge=10);
	p2.takeMigrants(c(migrants_M));
}

//year 1968
309948 late() {
        p2.setValue("K", KC_3); //
}

//year 1979
309959 late() {
	p2.setValue("K", KC_4); //
}

//year 1981
309961 late() {
	p2.setValue("K", KC_5); //
}

//year 1993
//migration of 1 male
309973 late() {
	migrants_M=p1.sampleIndividuals(1, sex="M", minAge=4,maxAge=10);
	p2.takeMigrants(c(migrants_M));
}

//year 2000
309980 late() {
	p2.setValue("K", KC_6); //
}

//year 2013
//migration of 4 mals
309993 late() {
	migrants_M=p1.sampleIndividuals(4, sex="M", minAge=4,maxAge=10);
	p2.takeMigrants(c(migrants_M));
}

//year 2015
//migration of 1 male
309995 late() {
	migrants_M=p1.sampleIndividuals(1, sex="M", minAge=4,maxAge=10);
	p2.takeMigrants(c(migrants_M));
}

//year 2018
//migration of 2 males
309998 late() {
	migrants_M=p1.sampleIndividuals(2, sex="M", minAge=4,maxAge=10);
	p2.takeMigrants(c(migrants_M));
}

//year 2020
310000 late() {
	p2.setValue("K", KC_6); //
}

// future prediction //setting the pop at ~100

//year 2021
310001 late() {
	p2.setValue("K", KC_7); //
}

//migration events //every 10 years - 0; 1; 5; 10
///////////////////////////////////

//~2031
310011 late() {
	p1mig = p1.sampleIndividuals(M, sex="M", minAge=4);
	p2.takeMigrants(p1mig);
}

//~2041
310021 late() {
	p1mig = p1.sampleIndividuals(M, sex="M", minAge=4);
	p2.takeMigrants(p1mig);
}

//~2051
310031 late() {
	p1mig = p1.sampleIndividuals(M, sex="M", minAge=4);
	p2.takeMigrants(p1mig);
}

//~2061
310041 late() {
	p1mig = p1.sampleIndividuals(M, sex="M", minAge=4);
	p2.takeMigrants(p1mig);
}

//~2071
310051 late() {
	p1mig = p1.sampleIndividuals(M, sex="M", minAge=4);
	p2.takeMigrants(p1mig);
}

//~2081
310061 late() {
	p1mig = p1.sampleIndividuals(M, sex="M", minAge=4);
	p2.takeMigrants(p1mig);
}

//~2091
310071 late() {
	p1mig = p1.sampleIndividuals(M, sex="M", minAge=4);
	p2.takeMigrants(p1mig);
}

//~2101
310081 late() {
	p1mig = p1.sampleIndividuals(M, sex="M", minAge=4);
	p2.takeMigrants(p1mig);
}

//~2111
310091 late() {
	p1mig = p1.sampleIndividuals(M, sex="M", minAge=4);
	p2.takeMigrants(p1mig);
}

//~2120
310100 late() {
	p1mig = p1.sampleIndividuals(M, sex="M", minAge=4);
	p2.takeMigrants(p1mig);
}



//2.2.2 Reproduction for Crater
///////////////////////////////////////////////////////////////////
//This contains effective migration
reproduction(p2) {
	if (sim.cycle % 2 == 0){
	// get males and females and randomize their order
	matureMales = subpop.sampleIndividuals(asInteger(sum(subpop.individuals.sex == "M")*0.78), sex="M", minAge=4,maxAge=10);
	matureMales_mating_twice=sample(matureMales,asInteger(length(matureMales)*0.6));
	migrantMales = subpop.sampleIndividuals(subpop.individuals.size(), sex="M", minAge=2,maxAge=9,migrant=T);
	males=c(matureMales,matureMales_mating_twice,migrantMales);
	//cat(sim.cycle + "," + "males=" + size(males)+ "\n");

	matureFemales = subpop.subsetIndividuals(sex="F", minAge=3,maxAge=14);
	females=c(matureFemales);
	//cat(sim.cycle + "," + "females=" + size(males)+ "\n");

	femaleCount = size(females);
	// draw number of offspring for males, assuming dominance
	offspringCounts = sample(1:3, size(males), replace=T, weights=c(0.2,0.2,0.6));
	// go through the males until we run out of females
	nextFemaleIndex = 0;
	males.tag = 0;
	for (maleIndex in seqAlong(males))
	{
		male = males[maleIndex];
		offspringCount = offspringCounts[maleIndex];

		//catn("male offspring number: " + paste(males.tag));
		//seems like it assumes that a female produces 1 offspring (it loops over offspringcount)
		for (i in seqLen(offspringCount))
		{
			if (nextFemaleIndex < femaleCount)
			{
				offspring = subpop.addCrossed(females[nextFemaleIndex], male,sex = 0.5);
				nextFemaleIndex = nextFemaleIndex + 1;
				male.tag = male.tag + 1;
			}
			else
			{
				// disable this callback for this cycle
				self.active = 0;
				return;
			}
		}
	}
}
	// disable this callback for this cycle
	self.active = 0;
}
////////////////////////
//3. Logs and Stats ////
////////////////////////


//3.1 stats on screen for P1
////////////////////////////

//1 early () {
//	//
//	cat("Year,popSizeP1,FitnessP1,meanHetP1,B_P1,FROHP1,avgvStrDelP1,avgStrDelP1,avgModDelP1,avgWkDelP1,avgNeutP1"+ "\n");
//}
//
//// record statistics every 1,000 generations during burn in (NAN for fitness if called in 'early' event)
//1000:57000 late() {
//	if (sim.cycle == 2 | sim.cycle % 100 == 0){
//		stats = getStats(p1, sampleSize); //asInteger(p1.individuals.size()*0.8)
//		cat(sim.cycle + "," + p1.individuals.size() + "," + stats + "\n");
//	}
//}

//print cycle

1:310100 late() {
if (sim.cycle % 100 == 0){
	print(sim.cycle);
	}
}

//3.2 Create output for P1 and P2
/////////////////////////////////

1 early() {
	HEAD = "Year,popSizeP1,PiP1,FitnessP1,meanHetP1,BP1,FROHP1,avgvStrDelP1,avgStrDelP1,avgModDelP1,avgWkDelP1,avgNeutP1,popSizeP2,PiP2,FitnessP2,meanHetP2,BP2,FROHP2,avgvStrDelP2,avgStrDelP2,avgModDe
lP2,avgWkDelP2,avgNeutP2,KCrater,Seed";
	writeFile(Out,HEAD,append=F);
}


//// record statistics every xx years

//209902:210100 late() { //assuming a split 100 y BP
309802:310100 late() { //assuming a split 200 y BP
//209702:210100 late() { //assuming a split 300 y BP
//209602:210100 late() { //assuming a split 400 y BP
	if (sim.cycle % 2 == 0){
		stats1 = getStats(p1, sampleSize);
		stats2 = getStats(p2, sampleSize);
		line=paste(c(sim.cycle + "," + size(p1.individuals) + "," + calcHeterozygosity(sample(p1.genomes,sampleSize)) + "," + stats1 + "," +  size(p2.individuals) + "," + calcHeterozygosity(sample
(p2.genomes,sampleSize)) + "," + stats2 + "," + KC_7 + "," + getSeed()));
		writeFile(Out,line,append=T);
	}
}

////////////////////////////
//4. functions /////////////
////////////////////////////
// define function to sample a population for
// mean fitness, heterozygosity, mean Froh,
// and avg num of mutations of different classes per individual (very str del, str del, mod del, wk del)
function (s) getStats(o pop, i sampSize)
{
	i = sample(pop.individuals, sampSize, F);

	m = sortBy(i.genomes.mutations, "position"); //get all mutations in sample
	m_uniq = unique(m); // get rid of redundant muts
	DAF = sapply(m_uniq, "sum(m == applyValue);"); // count number of each mut in pop
	m_uniq_polym = m_uniq[DAF != i.genomes.size()]; //remove fixed mutations??

	//initialize vectors
	ROH_length_sumPerInd_10Mb = c();
	ROH_length_sumPerInd_1Mb = c();
	ROH_length_sumPerInd_500Kb = c();
	ROH_length_sumPerInd_100Kb = c();
	Num_vStrDel_muts = c();
	Num_strDel_muts = c();
	Num_modDel_muts = c();
	Num_wkDel_muts = c();
	Num_neut_muts = c();
	ind_het = c();
	B_pop = c();

	for (individual in i) {

		indm = sortBy(individual.genomes.mutations, "position");
		indm = indm[match(indm, m_uniq_polym) >= 0];   // Check that individual mutations are not fixed
		indm_uniq = unique(indm);

		genotype = sapply(indm_uniq, "sum(indm == applyValue);");

		// tally number of mutations for different classes of selection coefficient per individual
		s = individual.genomes.mutations.selectionCoeff;

		Num_vStrDel_muts = c(Num_vStrDel_muts, sum(s<=-0.1));
		Num_strDel_muts = c(Num_strDel_muts, sum(s<=-0.01));
		Num_modDel_muts = c(Num_modDel_muts, sum(s<=-0.001 & s > -0.01));
		Num_wkDel_muts = c(Num_wkDel_muts, sum(s<=-0.00001 & s > -0.001));
		Num_neut_muts = c(Num_neut_muts, sum(s==0.0));

		if (isNULL(genotype)) {
			ind_het = c(ind_het, 0); //putting this here to avoid error when trying to sum null vector
			next;
		}

		ind_het = c(ind_het, sum(genotype==1)/(seqLength));

		//code for getting ROHs

		ID_het = (genotype == 1); //outputs T/F for genotypes if they are het or homDer
		ID_homDer = (genotype == 2);
		pos_het = indm_uniq.position[ID_het]; //outputs positions of heterozgoys genotypes

		startpos = c(0, pos_het); //adds 0 to beggining of vector of hets
		endpos = c(pos_het, sim.chromosome.lastPosition); //adds last position in genome to vector of hets
		pos_het_diff = endpos - startpos;


		//sum for ROHs > 10Mb
		ROH_startpos_10Mb = startpos[pos_het_diff > 10000000]; //filter out startpos that dont correspond to ROH > 10Mb
		ROH_endpos_10Mb = endpos[pos_het_diff > 10000000];
		ROH_length_10Mb = pos_het_diff[pos_het_diff > 10000000]; //vector of ROHs for each individual
		ROH_length_sum_10Mb = sum(ROH_length_10Mb);
		ROH_length_sumPerInd_10Mb = c(ROH_length_sumPerInd_10Mb, ROH_length_sum_10Mb); // add sum of ROHs for each individual to vector of ROHs for all individuals

		//sum for ROHs > 1Mb
		ROH_startpos_1Mb = startpos[pos_het_diff > 1000000]; //filter out startpos that dont correspond to ROH > 1Mb
		ROH_endpos_1Mb = endpos[pos_het_diff > 1000000];
		ROH_length_1Mb = pos_het_diff[pos_het_diff > 1000000]; //vector of ROHs for each individual
		ROH_length_sum_1Mb = sum(ROH_length_1Mb);
		ROH_length_sumPerInd_1Mb = c(ROH_length_sumPerInd_1Mb, ROH_length_sum_1Mb); // add sum of ROHs for each individual to vector of ROHs for all individuals

		//sum for ROHs > 500kb
		ROH_startpos_500Kb = startpos[pos_het_diff > 500000]; //filter out startpos that dont correspond to ROH > 500 Kb
		ROH_endpos_500Kb = endpos[pos_het_diff > 500000];
		ROH_length_500Kb = pos_het_diff[pos_het_diff > 500000]; //vector of ROHs for each individual
		ROH_length_sum_500Kb = sum(ROH_length_500Kb);
		ROH_length_sumPerInd_500Kb = c(ROH_length_sumPerInd_500Kb, ROH_length_sum_500Kb); // add sum of ROHs for each individual to vector of ROHs for all individuals


		//sum for ROHs > 100kb
		ROH_startpos_100Kb = startpos[pos_het_diff > 100000]; //filter out startpos that dont correspond to ROH > 100 Kb
		ROH_endpos_100Kb = endpos[pos_het_diff > 100000];
		ROH_length_100Kb = pos_het_diff[pos_het_diff > 100000]; //vector of ROHs for each individual
		ROH_length_sum_100Kb = sum(ROH_length_100Kb);
		ROH_length_sumPerInd_100Kb = c(ROH_length_sumPerInd_100Kb, ROH_length_sum_100Kb); // add sum of ROHs for each individual to vector of ROHs for all individuals

		//calculate 2B (inbreeding load)
		del_muts = c(individual.genomes.mutationsOfType(m1),individual.genomes.mutationsOfType(m2),individual.genomes.mutationsOfType(m3),individual.genomes.mutationsOfType(m4),individual.genomes.
mutationsOfType(m5));
		B_ind = c();

		if (del_muts.length()>0) {
			for(m in del_muts){
				//check if mut is heterozygous
				if(individual.genomes.mutationCountsInGenomes(m)==1){

					//protect against case where s < -1 (can happen with gamma DFE)
					s = max(m.selectionCoeff,-1.0);
					//difference in fitness between het and hom is s*(h-1) (1+sh -(1+s))
					B_ind = c(B_ind, s*(m.mutationType.dominanceCoeff-1));
					//catn(m.id + "," +  m.selectionCoeff + "," + m.selectionCoeff*(m.mutationType.dominanceCoeff-1));
				}
			}

			if(isNULL(B_ind)){
				B_pop = c(B_pop, 0.0);
			}
			// this is summed rather than multiplied
			//even if fitness is multiplicative
			else{
				B_pop = c(B_pop, sum(B_ind));
			}

		}

	}


	return(mean(pop.cachedFitness(NULL)/pop.individuals.tagF)+ "," + mean(ind_het) + ","  + mean(B_pop) + "," + mean(ROH_length_sumPerInd_100Kb)/seqLength + "," + mean(Num_vStrDel_muts) + "," + mean(N
um_strDel_muts)+ "," + mean(Num_modDel_muts) + "," + mean(Num_wkDel_muts) + "," + mean(Num_neut_muts));
}
